#!/usr/bin/env node
if (require.main === module) {
  ;(async () => {
    const program = require('commander')
    const { readConfig, readStdIn, responseHandler } = require('./cli-util')
    const getOp = async () => {
      const { host, auth } = await readConfig()
      if (process.stdout.isTTY) console.log('Using OCE at ' + host)

      const { client } = require('./client')
      return client(host, auth).itemVariations
    }

    program.version('2020.03.05')
    program
      .command('listVariationsByType')
      .description('List All Item Variations of a Variation Type')
      .requiredOption('--id <value>', 'id of the item.')
      .requiredOption(
        '--variationType <value>',
        'Type of the variation. Possible value: <i>language</i>'
      )
      .option(
        '--links <value>',
        'This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>'
      )
      .action(async cmd => {
        const id = cmd.id
        const variationType = cmd.variationType
        const links = cmd.links

        const op = await getOp()

        return op
          .listVariationsByType({ id, variationType, links })
          .then(responseHandler)
          .catch(err => {
            console.error(err)
          })
      })

    program
      .command('getMasterItem')
      .description('Read Item Variations by Variation Type')
      .requiredOption('--id <value>', 'id of the item.')
      .requiredOption(
        '--variationType <value>',
        'Type of the variation. Possible value: <i>language</i>'
      )
      .option(
        '--links <value>',
        'This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>'
      )
      .action(async cmd => {
        const id = cmd.id
        const variationType = cmd.variationType
        const links = cmd.links

        const op = await getOp()

        return op
          .getMasterItem({ id, variationType, links })
          .then(responseHandler)
          .catch(err => {
            console.error(err)
          })
      })

    program
      .command('updateMasterItem')
      .description('Update Master Item of an Item Variations Set')
      .requiredOption('--id <value>', 'id of the item.')
      .requiredOption(
        '--variationType <value>',
        'Type of the variation. Possible value: <i>language</i>'
      )
      .option(
        '--links <value>',
        'This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>'
      )
      .action(async cmd => {
        const id = cmd.id
        const variationType = cmd.variationType
        const links = cmd.links
        const body = await readStdIn()
        const op = await getOp()

        return op
          .updateMasterItem({
            id,
            variationType,
            body,
            links,
            xRequestedWith: 'XMLHttpRequest'
          })
          .then(responseHandler)
          .catch(err => {
            console.error(err)
          })
      })

    program
      .command('getItemForVariation')
      .description('Read Item Variation of a Variation Type Value')
      .option('--channelToken <value>', 'Channel token of the target channel.')
      .requiredOption('--id <value>', 'id of the item.')
      .requiredOption(
        '--variationType <value>',
        'Type of the variation. Possible value: <i>language</i>'
      )
      .requiredOption(
        '--variationValue <value>',
        'Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.'
      )
      .option(
        '--links <value>',
        'This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>'
      )
      .action(async cmd => {
        const channelToken = cmd.channelToken
        const id = cmd.id
        const variationType = cmd.variationType
        const variationValue = cmd.variationValue
        const links = cmd.links

        const op = await getOp()

        return op
          .getItemForVariation({
            channelToken,
            id,
            variationType,
            variationValue,
            links
          })
          .then(responseHandler)
          .catch(err => {
            console.error(err)
          })
      })

    program.on('command:*', function () {
      console.error('Invalid command: %s\n', program.args.join(' '))
      program.help()
      process.exit(1)
    })
    await program.parseAsync(process.argv)
    // if not command is found, print help
    if (process.argv.length === 2) {
      // e.g. display usage
      program.help()
    }
  })().catch(console.error)
}
